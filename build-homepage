#!/usr/bin/perl

# Copyright (C) 2013 Simon Josefsson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use LWP::Simple;

use File::Basename;
use File::Temp qw/tempfile/;

my %categories = ('YubiKey Low-level Library' =>
		  ["https://raw.github.com/Yubico/yubico-c/master/BLURB",
		   "https://raw.github.com/Yubico/yubico-j/master/BLURB"],
                  'YubiKey NEO' =>
		  ["https://raw.github.com/Yubico/yubico-bitcoin-java/master/BLURB",
		   "https://raw.github.com/Yubico/yubico-bitcoin-python/master/BLURB",
		   "https://raw.github.com/Yubico/yubioath-android/master/BLURB",
		   "https://raw.github.com/Yubico/ykneo-oath/master/BLURB",
		   "https://raw.github.com/Yubico/yubitotp-android/master/BLURB",
		   "https://raw.github.com/Yubico/ykneo-openpgp/master/BLURB",
		   "https://raw.github.com/Yubico/yubico-piv-tool/master/BLURB", ],
	          'YubiKey Personalization' =>
	          ["https://raw.github.com/Yubico/yubikey-personalization/master/BLURB",
		   "https://raw.github.com/Yubico/yubikey-personalization-gui/master/BLURB",
		   "https://raw.github.com/Yubico/libykneomgr/master/BLURB",
	           "https://raw.github.com/Yubico/yubikey-neo-manager/master/BLURB"],
	          'YubiKey Integration' =>
	          ["https://raw.github.com/Yubico/yubico-pam/master/BLURB",
		   "https://raw.github.com/Yubico/rlm-yubico/master/BLURB",
		   "https://raw.github.com/Yubico/yubiauth/master/BLURB",
		   "https://raw.github.com/Yubico/yubix/master/BLURB",
		   "https://raw.github.com/Yubico/yubico-windows-auth/master/BLURB"]);

sub build_projects_page {
	my $project = shift;
	my $summary = shift;
	my $dir = shift;
	my $content = get("https://raw.github.com/Yubico/$project/master/README");
	my $extra_links = '';
	my ($temphandle,$temp) = tempfile();
	print $temphandle $content;
	close $temphandle;
	open(ASCII, "asciidoc -o- -s $temp |") or die "failed to open asciidoc";
	my $massaged_content;
	while(<ASCII>) {
		$massaged_content .= $_;
	}
	close ASCII;
	unlink $temp;
	my $template = "project-index.html-template";
	if(-f "$dir/$project/$template") {
		$template = "$dir/$project/$template";
	}
	my $makefile = get("https://raw.github.com/Yubico/$project/master/Makefile.am");
	if($makefile) {
		my $mans = join(' ', ($makefile =~ m/dist_man\d_MANS = (.+)/g));
		foreach my $man (split(/\s/, $mans)) {
			my $man_content = get("https://raw.github.com/Yubico/$project/master/$man");
			my ($man_temphandle,$man_temp) = tempfile();
			print $man_temphandle $man_content;
			close $man_temphandle;
			open(GROFF, "groff -man -T html $man_temp |");
			my $man_html = '';
			while(<GROFF>) {
				next if m/CreationDate/;
				$man_html .= $_;
			}
			close GROFF;
			unlink $man_temp;
			open(MAN_OUT, ">", "$dir/$project/$man.html");
			print(MAN_OUT $man_html);
			close(MAN_OUT);
			$extra_links .= "<li><a href=\"$man.html\">$man</a></li>";
		}
		if($extra_links) {
			$extra_links = "<h3>Manual pages</h3><ul>$extra_links</ul>";
		}
	}

	open(TEMPL, "$template") or die "failed to open project template";
	open(OUT, ">", "$dir/$project/index.html") or die "failed to open output file ($dir/$project/index.html)";
	while(<TEMPL>) {
		s/PROJECT_NAME/$project/;
		s/PROJECT_SUMMARY/$summary/;
		s/PROJECT_CONTENT/$massaged_content/;
		s/EXTRA_LINKS/$extra_links/;
		print(OUT $_);
	}
	close TEMPL;
	close OUT;
}

my $html;

foreach my $category (keys %categories) {
    my @blurbs = @{$categories{$category}};
    $html .= "<h2>$category</h2>\n\n";
    $html .= "<p><table>\n<tr><th>Project name</th><th>License</th>" .
	"<th>Description</th></tr>\n\n";
    foreach my $blurb (@blurbs) {
	my $content = get($blurb);
	my $homepage = $1 if $content =~ m,Homepage: (.+),g;
	my $license = $1 if $content =~ m,License: (.+),g;
	my $project = $1 if $content =~ m,Project: (.+),g;
	my $summary = $1 if $content =~ m,Summary: (.+),g;
	die "could not parse blurb: $content ($blurb)"
	    if !$project || !$summary || !$license;
	$html .= "<tr><td><a href=\"$homepage\">$project</a></td>\n";
	$html .= "<td><a href=\"http://spdx.org/licenses/$license\">" .
	    "$license</a></td>\n";
	$html .= "<td>$summary</td></tr>\n\n";
	if($homepage =~ m,opensource\.yubico\.com,) {
		build_projects_page($project, $summary, dirname($0));
	}
    }
    $html .= "</table></p>\n";
}

my $indexhtml = do { local $/; <> };
$indexhtml =~ s/REPLACEME/$html/g;
print $indexhtml;
