#!/usr/bin/perl

# Copyright (C) 2013 Simon Josefsson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use LWP::Simple;

use File::Basename;
use File::Temp qw/tempfile/;

my %categories = ('YubiKey Low-level Library' =>
		  ["https://raw.github.com/Yubico/yubico-c/master/BLURB",
		   "https://raw.github.com/Yubico/yubico-j/master/BLURB"],
                  'YubiKey NEO' =>
		  ["https://raw.github.com/Yubico/yubico-bitcoin-java/master/BLURB",
		   "https://raw.github.com/Yubico/yubico-bitcoin-python/master/BLURB",
		   "https://raw.github.com/Yubico/yubioath-android/master/BLURB",
		   "https://raw.github.com/Yubico/ykneo-oath/master/BLURB",
		   "https://raw.github.com/Yubico/yubitotp-android/master/BLURB"]);

sub build_projects_page {
	my $project = shift;
	my $summary = shift;
	my $dir = shift;
	my $content = get("https://raw.github.com/Yubico/$project/master/README");
	my ($temphandle,$temp) = tempfile();
	print $temphandle $content;
	close $temphandle;
	open(ASCII, "asciidoc -o- -s $temp |") or die "failed to open asciidoc";
	my $massaged_content;
	while(<ASCII>) {
		$massaged_content .= $_;
	}
	close ASCII;
	unlink $temp;
	my $template = "project-index.html-template";
	if(-f "$dir/$project/$template") {
		$template = "$dir/$project/$template";
	}
	open(TEMPL, "$template") or die "failed to open project template";
	open(OUT, ">", "$dir/$project/index.html") or die "failed to open output file";
	while(<TEMPL>) {
		s/PROJECT_NAME/$project/;
		s/PROJECT_SUMMARY/$summary/;
		s/PROJECT_CONTENT/$massaged_content/;
		print(OUT $_);
	}
	close TEMPL;
	close OUT;
}

my $html;

foreach my $category (keys %categories) {
    my @blurbs = @{$categories{$category}};
    $html .= "<h2>$category</h2>\n\n";
    $html .= "<p><table>\n<tr><th>Project name</th><th>License</th>" .
	"<th>Description</th></tr>\n\n";
    foreach my $blurb (@blurbs) {
	my $content = get($blurb);
	my $license = $1 if $content =~ m,License: (.+),g;
	my $project = $1 if $content =~ m,Project: (.+),g;
	my $summary = $1 if $content =~ m,Summary: (.+),g;
	die "could not parse blurb: $content"
	    if !$project || !$summary || !$license;
	$html .= "<tr><td><a href=\"$project/\">$project</a></td>\n";
	$html .= "<td><a href=\"http://spdx.org/licenses/$license\">" .
	    "$license</a></td>\n";
	$html .= "<td>$summary</td></tr>\n\n";
	build_projects_page($project, $summary, dirname($0));
    }
    $html .= "</table></p>\n";
}

my $indexhtml = do { local $/; <> };
$indexhtml =~ s/REPLACEME/$html/g;
print $indexhtml;
