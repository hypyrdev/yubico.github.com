#!/usr/bin/perl

use strict;
use warnings;

use LWP::Simple;
use LWP::UserAgent;

use File::Basename;
use File::Temp qw/tempfile/;

use JSON;
use MIME::Base64::URLSafe;

use Sort::Versions;

my $dir = dirname($0);
my $project = shift;

# strip trailing /
$project =~ s/\/$//;

my ($homepage, $license, $summary, $name, $travis);
my $blurb = "https://raw.github.com/Yubico/$project/master/BLURB";
my $content = get($blurb);

$homepage = $1 if $content =~ m,Homepage: (.+),g;
$license = $1 if $content =~ m,License: (.+),g;
$name = $1 if $content =~ m,Name: (.+),g;
$project = $1 if $content =~ m,Project: (.+),g;
$summary = $1 if $content =~ m,Summary: (.+),g;
$travis = $1 if $content =~ m,Travis: (.+),g;

die "could not parse blurb: $content ($blurb)" if !$project || !$summary || !$license;
$name = $project unless $name;

my $extra_links = '';
my $man_links = '';
my $doc_links = '';
my $travis_link = '';
$content = get("https://raw.github.com/Yubico/$project/master/README");
my ($temphandle,$temp) = tempfile();
print $temphandle $content;
close $temphandle;
open(my $ascii, "-|", "asciidoc -o- -s $temp") or die "failed to open asciidoc";
my $massaged_content;
while(<$ascii>) {
  $massaged_content .= $_;
}
close $ascii;
unlink $temp;

if($travis) {
  $travis_link = '<a id="travis_link" href="' . $travis . '"><img id="travis_img" src="' . $travis . '.png?branch=master"/></a>';
}

my $makefile = get("https://raw.github.com/Yubico/$project/master/Makefile.am");
if($makefile) {
  my $mans = join(' ', ($makefile =~ m/dist_man\d_MANS = (.+)/g));
  foreach my $man (split(/\s/, $mans)) {
    my $man_content = get("https://raw.github.com/Yubico/$project/master/$man");
    my ($man_temphandle,$man_temp) = tempfile();
    print $man_temphandle $man_content;
    close $man_temphandle;
    open(my $groff, "-|", "groff -man -T html $man_temp");
    my $man_html = '';
    while(<$groff>) {
      next if m/CreationDate/;
      next if m/Creator/;
      $man_html .= $_;
    }
    close $groff;
    unlink $man_temp;
    open(my $man_out, ">", "$dir/$project/$man.html");
    print($man_out $man_html);
    close($man_out);
    $man_links .= "<li><a href=\"$man.html\">$man</a></li>";
  }
}
if($man_links ne '') {
  $extra_links .= "<h3>Manual pages</h3><ul>$man_links</ul>\n";
}
my $docs_url = "https://api.github.com/repos/Yubico/$project/contents/doc";
if(defined $ENV{YUBICO_GITHUB_TOKEN}) {
  $docs_url .= "?access_token=" . $ENV{YUBICO_GITHUB_TOKEN};
}
my $docs_raw = get($docs_url);
if($docs_raw) {
  my $docs = decode_json($docs_raw);
  if(ref($docs) eq 'ARRAY') {
    foreach my $doc (@$docs) {
      my $doc_name = $doc->{path};
      next unless $doc_name =~ m/asciidoc$/;
      my $url = $doc->{url};
      if(defined $ENV{YUBICO_GITHUB_TOKEN}) {
        $url .= "&access_token=" . $ENV{YUBICO_GITHUB_TOKEN};
      }
      my $raw_content = get($url);
      unless($raw_content) {
        warn "tried to get " . $url . ".";
        next;
      }
      my $content = decode_json($raw_content);
      my $doc_content = urlsafe_b64decode($content->{content});
      my ($temphandle,$temp) = tempfile();
      print $temphandle $doc_content;
      close $temphandle;
      open(my $ascii, "-|", "asciidoc -o- -s $temp") or die "failed to open asciidoc";
      my $massaged_content;
      while(<$ascii>) {
        $massaged_content .= $_;
      }
      close $ascii;
      unlink $temp;

      my $doc_template = "documentation.html-template";
      if(-f "$dir/$project/$doc_template") {
        $doc_template = "$dir/$project/$doc_template";
      }
      open(my $doc_templ, "<", $doc_template) or die "failed to open documentation template";

      $doc_name =~ s/\.asciidoc$//;

      open(my $doc_out, ">", "$dir/$project/$doc_name.html") or die "failed to open output file ($dir/$project/$doc_name)";
      while(<$doc_templ>) {
        s/PROJECT_PROJECT/$project/g;
        s/PROJECT_NAME/$name/g;
        s/PROJECT_SUMMARY/$summary/g;
        s/PROJECT_CONTENT/$massaged_content/g;
        s/PROJECT_TRAVIS_LINK/$travis_link/g;
        print($doc_out $_);
      }
      close $doc_templ;
      close $doc_out;
      $doc_links .= "<li><a href=\"$doc_name.html\">" . basename($doc_name) . "</a></li>";
    }
  }
}
if($doc_links ne '') {
  $extra_links .= "<h3>Documentation</h3><ul>$doc_links</ul>\n";
}

my $template = "project-index.html-template";
if(-f "$dir/$project/$template") {
  $template = "$dir/$project/$template";
}
open(my $templ, "<", "$template") or die "failed to open project template";
open(my $out, ">", "$dir/$project/index.html") or die "failed to open output file ($dir/$project/index.html)";
while(<$templ>) {
  s/PROJECT_PROJECT/$project/g;
  s/PROJECT_NAME/$name/g;
  s/PROJECT_SUMMARY/$summary/g;
  s/PROJECT_CONTENT/$massaged_content/g;
  s/EXTRA_LINKS/$extra_links/g;
  s/PROJECT_TRAVIS_LINK/$travis_link/g;
  print($out $_);
}
close $templ;
close $out;

if(-d "$dir/$project/releases/") {
  my $release_content = '';
  opendir(my $release_dir, "$dir/$project/releases/") or die "failed opening $dir/$project/releases/";
  my @release_files = readdir($release_dir);
  closedir($release_dir);
  @release_files = grep(!/\.sig$/, @release_files);
  @release_files = grep(!/^\./, @release_files);
  @release_files = sort { myversioncmp($b, $a) } @release_files;
  foreach my $file (@release_files) {
    my $name = $file;
    $name =~ s/\.tar\.gz$//;
    $name =~ s/\.tgz$//;
    $name =~ s/\.zip$//;
    $name =~ s/\.cap$//;
    $name =~ s/\.apk$//;
    $name =~ s/\.exe$//;
    $name =~ s/\.pkg$//;
    $release_content .= <<EOH

<dt>${name}</dt>
<dd>
  <a href="releases/${file}">${file}</a>
</dd>
EOH
    ;
    if(-f "$dir/$project/releases/$file.sig") {
      $release_content .= <<EOH
<dd>
  <a href="releases/${file}.sig">${file}.sig</a>
</dd>
EOH
    }
  }

  my $rel_template = "releases.html-template";
  if(-f "$dir/$project/$rel_template") {
    $rel_template = "$dir/$project/$rel_template";
  }
  open(my $rel, "<", "$rel_template") or die "failed to open project template";
  open(my $rel_out, ">", "$dir/$project/releases.html") or die "failed to open output file ($dir/$project/index.html)";
  while(<$rel>) {
    s/PROJECT_PROJECT/$project/g;
    s/PROJECT_NAME/$name/g;
    s/PROJECT_SUMMARY/$summary/g;
    s/PROJECT_RELEASES/$release_content/g;
    s/PROJECT_TRAVIS_LINK/$travis_link/g;
    print($rel_out $_);
  }
  close $rel;
  close $rel_out;
}

sub version {
  my $name = shift;
  my @parts = split(/-/, $name);
  my $ver;
  foreach my $part (@parts) {
    if($part =~ m/^[0-9]/) {
      $ver = $part;
      last;
    }
  }
  die $name unless $ver;
  $ver =~ s/\.tar\.gz//;
  return $ver;
}

sub myversioncmp {
  my $a = shift;
  my $b = shift;

  my $a_ver = version($a);
  my $b_ver = version($b);

  if($a_ver eq $b_ver) {
    return $a cmp $b;
  } else {
    return versioncmp($a_ver, $b_ver);
  }
}
